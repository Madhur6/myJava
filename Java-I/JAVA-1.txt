# Java-Sheet (Madhur's Cheat Sheet)

## Table of Contents

### Chapter I: Java Basics
- Source Code to Bytecode
- JVM and Platform Independence

### Chapter II: Object-Oriented Programming (OOP)
- Classes and Objects
- State and Behavior

### Chapter III: Main Method
- `public static void main(String[] args)`
- CLI Arguments

### Chapter IV: Data Types
- Primitive vs. Reference Types
- Examples and Characteristics

### Chapter V: OOP Principles
- Encapsulation
- Inheritance
- Abstraction
- Polymorphism

### Chapter VI: Constructors, Variables & Operations
- Constructors,
- Variables,
- Operations,


### Chapter VII: Packages, Access-Modifiers, Exceptions
- Packages,
- Access-Modifiers,
- Exceptions,


### Chapter VIII: Arrays
- Basics of Arrays
- Basics of ArrayLists


------------------------------------------------------------------------------------<CHAPTER-I>-------------------------------------------------------------------------------------------------


src(.java) -------> byteCode(.class) ------------------jvm interprets the byte-code(.class) & JIT(just-in-time compiles the interpreted byte-code to --> )---------------------->(machine-code) 
           javac                                  
                          (Platform-Independence) [Any machine that has 'jvm' can execute the .class file]




------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------<CHAPTER-II>------------------------------------------------------------------------------------------------




# Java Oops
- Style of programming, Where we organize our programs around data rather than logic & objects rather than actions.

**Class** - Blueprint that outlines the structure of our program.

**Object** - Programming representation of real-world entity.

- JVM creates objects, With the help of Class, Hence called 'blueprint'.

                                            
Class(Blueprint) -------------------------> JVM ----------------------> Objects
                  with the help of class    |          creates
                                            |
                                            | state & behaviour information
                                            |
                                            |
                                        Programmer(US)  


- Now Programmer needs to provide more information, JVM is concerned about just 2 information about any object:
   - **State**: Represents it's properties, The 'attributes' possibly distinguishing 1 object from the other.
   - **Behaviour**: Represents the actions Object might perform.

- *Note*: Behaviours are represented via non-static methods.



------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------------------<CHAPTER-III>-----------------------------------------------------------------------------------------------



## public static void main(String[] args){}:

   - main method: [Entry-point of out program]

   - String[]: To accept the `cli` arguments. (command line interface)

   - args: Accessible as array of string. [can be hello/apple/args/etc]

   - Can also write: (String...args) [Allows method to accept 0 or more arguments.]




------------------------------------------------------------------------------------<CHAPTER-IV>-----------------------------------------------------------------------------------------------
// Data - Types in JAVA

// --- Primitive Types ---

boolean       // true or false
float         // Single-precision (4 bytes) | e.g., 3.14f
double        // Double-precision (8 bytes) | e.g., 3.14159265358979
byte          // Integer (1 byte) | Range: -128 to 127
short         // Integer (2 bytes) | Range: -32,768 to 32,767
int           // Integer (4 bytes) | Range: -2^31 to 2^31-1
long          // Integer (8 bytes) | Range: -2^63 to 2^63-1 | e.g., 123L
char          // Single character (2 bytes) | Unicode values


// --- Reference Types (Non-Primitive) ---

String        // Ex., "Hello, Java!"
int[]         // Array of integers
ArrayList     // Dynamic array | java.util.ArrayList
LinkedList    // Dynamic list | java.util.LinkedList
Map           // Key-value pairs | java.util.HashMap
Set           // Unique collection | java.util.HashSet
Pair          // Tuple-like structure | javafx.util.Pair



// --- Examples of Loops ---
for (int i = 0; i < 5; i++) {
    System.out.println(i);
}

for (int num : new int[]{1, 2, 3}) {
    System.out.println(num);
}

// --- Stream Example ---
IntStream.range(1, 5).forEach(System.out::println);

// --- Special Cases ---
String name = null; // Equivalent to None in Python
 

 
// primitive-types (non-objects)-------------------------------

// byte, short, int, long
// float, double
// char
// boolean

// reference-types (objects) or non-primitive-types------------

// String
// int[] & String[] arrays
// ArrayList




---------------------------------------------------------------------------------Data-Types in .java------------------------------------------------------------------------------------------



- **Primitive-Data-Type**                                      | - **Non-Primitive-Data-Type**
  - Are passed by values                                       |   - Are passed by reference
  - Basic data-types [Pre-defined].                            |   - Reference-Type.
  - Are not objects.                                           |   - Are Objects.
  - Immutable.                                                 |   - Immutable/ Mutable.
  - Non-Nullable.                                              |   - Nullable.
  - Hold data directly in memory.                              |   - Stores reference to objects.
  - Stored in stack.                                           |   - Stored in Heap [Reference stored in stack].
  - Doesn't have methods.                                      |   - Have methods.
                                                               |
  - Ex. byte, short, int, long, float, double, char, boolean...|   - Ex. ArrayList                                         [Mutable],
                                                               |   -     Arrays[String & int], String,**Wrapper-Classes**  [Immutable].
                                                               |   -     Custom-Classes, Objects                           [Mutable but can be made imutable]


Note: String is an immutable object.


// Q1: Why are primitive types immutable?
// Ans: Primitive types represent raw values stored directly in memory and are not tied to objects or references.
//      When you modify a primitive, a completely new value is created or assigned in memory.


// Example 1: Primitive Type-----------------------------------------------------------------------------------------------

   int a = 10;  // The value 10 is directly stored in the memory allocated for 'a'.
   a = 20;      // A new value (20) is stored, replacing the previous value.

// Example 2: String (Immutable Object)------------------------------------------------------------------------------------

   String s = "hello"; // Let 's' be stored at memory address 'abcX123'.
   s += " world";      // Concatenation creates a new String at a different address, e.g., 'xyzY456'.

   System.out.println(s); // Prints "hello world".
   // The original memory location ('abcX123') remains unchanged.


